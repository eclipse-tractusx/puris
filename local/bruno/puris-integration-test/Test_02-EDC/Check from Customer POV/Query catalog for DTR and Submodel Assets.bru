meta {
  name: Query catalog for DTR and Submodel Assets
  type: http
  seq: 1
}

post {
  url: {{CUSTOMER_EDC}}/{{MANAGEMENT_PATH}}/v3/catalog/request
  body: json
  auth: none
}

headers {
  X-Api-Key: {{CUSTOMER_EDC_API_KEY}}
}

body:json {
  {
    "@context": {
      "@vocab": "https://w3id.org/edc/v0.0.1/ns/"
    },
    "@type": "CatalogRequest",
    "protocol": "dataspace-protocol-http",
    "counterPartyAddress": "{{SUPPLIER_EDC_EXT_HOSTNAME}}/{{PROTOCOL_PATH}}",
    "counterPartyId": "{{SUPPLIER_BPNL}}",
    "querySpec": {
      "offset": 0,
      "limit": 100,
      "filter": "",
      "range": {
        "from": 0,
        "to": 100
      },
      "filterExpression": [
        {
          "@type": "CriterionDto",
          "operandLeft": "https://w3id.org/catenax/ontology/common#version",
          "operator": "=",
          "operandRight": "3.0"
        }
      ]
    }
  }
}

tests {
  test("response is ok", function() {
      expect(res.getStatus()).to.equal(200);
  });
  
  const contractOffers = res.getBody()['dcat:dataset'];
  
  test("Verify response contains six data offers", function () {
      expect(contractOffers).to.be.an("array");
      // dtr, part type information, stock, demand, delivery, production
      expect(contractOffers.length).to.eq(7);
  });
  
  
  test("Verify that dtr has been offered (dct:type, cx-common:version)", function () {
      const contractOffer = contractOffers.find(function (offer) {
          return offer["dct:type"]["@id"] === "https://w3id.org/catenax/taxonomy#DigitalTwinRegistry";
      });
  
      expect(contractOffer).to.exist;
      expect(contractOffer["https://w3id.org/catenax/ontology/common#version"]).to.equal("3.0");
  });
  
  const expectedSemanticIds = [
      "urn:samm:io.catenax.item_stock:2.0.0#ItemStock",
      "urn:samm:io.catenax.part_type_information:1.0.0#PartTypeInformation",
      "urn:samm:io.catenax.short_term_material_demand:1.0.0#ShortTermMaterialDemand",
      "urn:samm:io.catenax.planned_production_output:2.0.0#PlannedProductionOutput",
      "urn:samm:io.catenax.delivery_information:2.0.0#DeliveryInformation",
      "urn:samm:io.catenax.days_of_supply:2.0.0#DaysOfSupply"
  ];
  
  expectedSemanticIds.forEach(function(semanticId){
      sumbodelName = semanticId.split("#")[1];
  
      test("Verify that " + sumbodelName + " Submodel has been offered (dct:type, cx-common:version, aas-semantics:semanticId)", function () {
          const contractOffer = contractOffers.find(function (offer) {
              return offer["dct:type"]["@id"] === "https://w3id.org/catenax/taxonomy#Submodel" && offer["https://admin-shell.io/aas/3/0/HasSemantics/semanticId"]["@id"] === semanticId;
          });
  
          expect(contractOffer).to.exist;
          expect(contractOffer["https://w3id.org/catenax/ontology/common#version"]).to.equal("3.0");
      });
  });
}

#
# Copyright (c) 2023 Volkswagen AG
# Copyright (c) 2023 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. (represented by Fraunhofer ISST)
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
version: "3"
services:
    puris-frontend-customer:
        image: puris-frontend:dev
        container_name: customer-frontend
        ports:
            - 3000:8080
        environment:
            - APP_NAME=PURIS Customer
            - BACKEND_BASE_URL=http://localhost:8081/catena/
            - BACKEND_API_KEY=${BACKEND_API_KEY}
            - ENDPOINT_MATERIALS=stockView/materials
            - ENDPOINT_PRODUCTS=stockView/products
            - ENDPOINT_MATERIAL_STOCKS=stockView/material-stocks
            - ENDPOINT_PRODUCT_STOCKS=stockView/product-stocks
            - ENDPOINT_CUSTOMER=stockView/customer?ownMaterialNumber=
            - ENDPOINT_PARTNER_PRODUCT_STOCKS=stockView/partner-product-stocks?ownMaterialNumber=
            - ENDPOINT_UPDATE_PARTNER_PRODUCT_STOCK=stockView/update-partner-product-stock?ownMaterialNumber=

    puris-backend-customer:
        image: puris-backend:dev
        container_name: customer-backend
        depends_on: 
            edc-customer-control-plane:
                condition: service_started #service_healthy
        ports:
            - 8081:8081 # expose port of server.port
        environment:
            - server.port=8081
            - puris.demonstrator.role=customer
            - edc.controlplane.host=customer-control-plane
            - edc.controlplane.data.port=8181
            - edc.controlplane.data.path=/api/v1/data
            - edc.controlplane.key=${EDC_API_PW}
            - edc.dataplane.public.port=8285 # edc-customer-data-plane
            - edc.applydataplaneworkaround=false
            - edc.idsUrl=http://customer-control-plane:8184/api/v1/ids
            - own.bpnl=BPNL4444444444XX
            - own.bpns=BPNS4444444444XX
            - edr.endpoint=http://customer-backend:8081/catena/edrendpoint
            - request.serverendpoint=http://customer-backend:8081/catena/product-stock/request
            - response.serverendpoint=http://customer-backend:8081/catena/product-stock/response
            - puris.api.key=${BACKEND_API_KEY}

    edc-customer-control-plane:
        extends:
            file: ./tractus-x-edc/docker-compose.yaml
            service: control-plane
        container_name: customer-control-plane
        depends_on: 
            omejdn-daps:
                condition: service_started # has no health-check
            vault:
                condition: service_started # has no health-check, needs to run script to put secrets
            postgres:
                condition: service_started # has no health-check, needs to run db script to create edc tables
        environment:
            edc.vault.hashicorp.token: ${VAULT_DEV_ROOT_TOKEN_ID}
            edc.api.auth.key: ${EDC_API_PW}
            edc.datasource.asset.user: ${PG_USER}
            edc.datasource.asset.password: ${PG_PW}
            edc.datasource.contractdefinition.user: ${PG_USER}
            edc.datasource.contractdefinition.password: ${PG_PW}
            edc.datasource.contractnegotiation.user: ${PG_USER}
            edc.datasource.contractnegotiation.password: ${PG_PW}
            edc.datasource.policy.user: ${PG_USER}
            edc.datasource.policy.password: ${PG_PW}
            edc.datasource.transferprocess.user: ${PG_USER}
            edc.datasource.transferprocess.password: ${PG_PW}
        ports:
            - 8180:8180
            - 8181:8181
            - 8182:8182
            - 8183:8183
            - 8184:8184
        volumes:
            - ./tractus-x-edc/config/customer/control-plane.properties:/app/configuration.properties

    edc-customer-data-plane:
        extends:
            file: ./tractus-x-edc/docker-compose.yaml
            service: data-plane
        container_name: customer-data-plane
        depends_on:
            omejdn-daps:
                condition: service_started # has no health-check
            vault:
                condition: service_started # has no health-check, needs to run script to put secrets
            postgres:
                condition: service_started # has no health-check, needs to run db script to create edc tables
        ports:
            - 8280:8280
            - 8285:8285
        environment:
            edc.vault.hashicorp.token: ${VAULT_DEV_ROOT_TOKEN_ID}
        volumes:
            - ./tractus-x-edc/config/customer/data-plane.properties:/app/configuration.properties

    omejdn-daps:
        extends:
            file: ./daps/docker-compose.yaml
            service: omejdn-daps
        container_name: omejdn-daps
        volumes:
            - ./vault/secrets/customer.cert:/opt/keys/clients/customer.cert:ro
            - ./vault/secrets/supplier.cert:/opt/keys/clients/supplier.cert:ro

    vault:
        build: ./vault
        container_name: vault
        ports:
            - 8200:8200
        environment:
            # token id may not contain prefix
            VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN_ID}
            VAULT_ADDR: http://vault:8200
            VAULT_PUT_SECRETS_DIR: ${VAULT_SECRETS_DIR}
            # ATTENTION: Non productive environment
            SKIP_SETCAP: "true"
            SKIP_CHOWN: "true"
        volumes:
            - ./vault/secrets:${VAULT_SECRETS_DIR}
        
    postgres:
        image: postgres:15.4-alpine
        container_name: postgres
        environment:
            POSTGRES_DB: edc
            POSTGRES_USER: ${PG_USER}
            POSTGRES_PASSWORD: ${PG_PW}
        volumes:
            # use docker-compose down --volumes to kill db volume
            # only then, changes to the script are executed!
            - ./postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

    puris-frontend-supplier:
        image: puris-frontend:dev
        container_name: supplier-frontend
        ports:
            - 3001:8080
        environment:
            - APP_NAME=PURIS Customer
            - BACKEND_BASE_URL=http://localhost:8082/catena/
            - BACKEND_API_KEY=${BACKEND_API_KEY}
            - ENDPOINT_MATERIALS=stockView/materials
            - ENDPOINT_PRODUCTS=stockView/products
            - ENDPOINT_MATERIAL_STOCKS=stockView/material-stocks
            - ENDPOINT_PRODUCT_STOCKS=stockView/product-stocks
            - ENDPOINT_CUSTOMER=stockView/customer?ownMaterialNumber=
            - ENDPOINT_PARTNER_PRODUCT_STOCKS=stockView/partner-product-stocks?ownMaterialNumber=
            - ENDPOINT_UPDATE_PARTNER_PRODUCT_STOCK=stockView/update-partner-product-stock?ownMaterialNumber=

    puris-backend-supplier:
        image: puris-backend:dev
        container_name: supplier-backend
        depends_on:
            edc-supplier-control-plane:
                condition: service_started #service_healthy
        ports:
            - 8082:8082
        environment:
            - server.port=8082
            - puris.demonstrator.role=supplier
            - edc.controlplane.host=supplier-control-plane
            - edc.controlplane.data.port=9181
            - edc.controlplane.data.path=/api/v1/data
            - edc.controlplane.key=${EDC_API_PW}
            - edc.dataplane.public.port=9285
            - edc.applydataplaneworkaround=false
            - edc.idsUrl=http://supplier-control-plane:9184/api/v1/ids
            - own.bpnl=BPNL1234567890ZZ
            - own.bpns=BPNS1234567890ZZ
            - edr.endpoint=http://supplier-backend:8082/catena/edrendpoint
            - request.serverendpoint=http://supplier-backend:8082/catena/product-stock/request
            - response.serverendpoint=http://supplier-backend:8082/catena/product-stock/response
            - puris.api.key=${BACKEND_API_KEY}
                
    edc-supplier-control-plane:
        extends:
            file: ./tractus-x-edc/docker-compose.yaml
            service: control-plane
        container_name: supplier-control-plane
        depends_on:
            omejdn-daps:
                condition: service_started # has no health-check
            vault:
                condition: service_started # has no health-check, needs to run script to put secrets
            postgres:
                condition: service_started # has no health-check, needs to run db script to create edc tables
        ports:
            - 9180:9180
            - 9181:9181
            - 9182:9182
            - 9183:9183
            - 9184:9184
        environment:
            edc.vault.hashicorp.token: ${VAULT_DEV_ROOT_TOKEN_ID}
            edc.api.auth.key: ${EDC_API_PW}
            edc.datasource.asset.user: ${PG_USER}
            edc.datasource.asset.password: ${PG_PW}
            edc.datasource.contractdefinition.user: ${PG_USER}
            edc.datasource.contractdefinition.password: ${PG_PW}
            edc.datasource.contractnegotiation.user: ${PG_USER}
            edc.datasource.contractnegotiation.password: ${PG_PW}
            edc.datasource.policy.user: ${PG_USER}
            edc.datasource.policy.password: ${PG_PW}
            edc.datasource.transferprocess.user: ${PG_USER}
            edc.datasource.transferprocess.password: ${PG_PW}
        volumes:
            - ./tractus-x-edc/config/supplier/control-plane.properties:/app/configuration.properties

    edc-supplier-data-plane:
        extends:
            file: ./tractus-x-edc/docker-compose.yaml
            service: data-plane
        container_name: supplier-data-plane
        depends_on:
            omejdn-daps:
                condition: service_started # has no health-check
            vault:
                condition: service_started # has no health-check, needs to run script to put secrets
            postgres:
                condition: service_started # has no health-check, needs to run db script to create edc tables
        ports:
            - 9280:9280
            - 9285:9285
        environment:
            edc.vault.hashicorp.token: ${VAULT_DEV_ROOT_TOKEN_ID}
        volumes:
            - ./tractus-x-edc/config/supplier/data-plane.properties:/app/configuration.properties

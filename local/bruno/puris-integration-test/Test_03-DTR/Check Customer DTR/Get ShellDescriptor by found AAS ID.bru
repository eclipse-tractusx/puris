meta {
  name: Get ShellDescriptor by found AAS ID
  type: http
  seq: 3
}

get {
  url: {{CUSTOMER_DTR}}/shell-descriptors/:aasIdentifier
  body: none
  auth: bearer
}

params:path {
  aasIdentifier: {{CUSTOMER_AAS_IDENTIFIER}}
}

headers {
  Edc-Bpn: {{SUPPLIER_BPNL}}
}

auth:bearer {
  token: {{CUSTOMER_BEARER_TOKEN}}
}

script:pre-request {
  const materialNumberCustomer = bru.getEnvVar('MATERIAL_NUMBER_CUSTOMER');
  const materialNumberSupplier = bru.getEnvVar('MATERIAL_NUMBER_SUPPLIER');
  
  const queryParam = '{"name":"customerPartId","value":"'+materialNumberCustomer+'"},{"name":"manufacturerPartId","value":"'+materialNumberSupplier+'"}';
  
  const encodedQueryParam = Buffer.from(queryParam).toString("base64");
  bru.setVar('DTR_QUERY_SPECIFIC_ASSET_IDS_ENCODED', encodedQueryParam);
}

tests {
  test("response is ok", function() {
      expect(res.getStatus()).to.equal(200);
  });
  
  const jsonData = res.getBody();
  
  const expectedSpecificAssetIds = [
      { name: "customerPartId", value: bru.getEnvVar("MATERIAL_NUMBER_CUSTOMER") },
      { name: "digitalTwinType", value: "PartType" },
      { name: "manufacturerPartId", value: bru.getEnvVar("MATERIAL_NUMBER_SUPPLIER") },
      { name: "manufacturerId", value: bru.getEnvVar("SUPPLIER_BPNL") }
  ];
  
  expectedSpecificAssetIds.forEach(expectedAsset => {
      const foundAsset = jsonData.specificAssetIds.find(asset => asset.name === expectedAsset.name);
  
      test(`SpecificAssetId - Name is "${expectedAsset.name}"`, () => {
          expect(foundAsset).to.not.be.undefined;
      });
  
      test(`SpecificAssetId - Value for "${expectedAsset.name}" is "${expectedAsset.value}"`, () => {
          expect(foundAsset.value).to.eql(expectedAsset.value);
      });
  });
  
  // get SubmodelDescriptor for PartTypeInformation (implicit samm version check)
  const submodelDescriptorPartTypeInformation = jsonData.submodelDescriptors.find(function (submodelDescriptor) {
      return submodelDescriptor.semanticId.keys[0].value === "urn:samm:io.catenax.part_type_information:1.0.0#PartTypeInformation";
  });
  
  test("SubmodelDescriptor Part Type Information - Verify that SubmodelDescriptor for Part Type Information does not exist", function () {
      expect(submodelDescriptorPartTypeInformation).to.be.undefined;
  });
  
  const expectedSemanticIds = [
      "urn:samm:io.catenax.item_stock:2.0.0#ItemStock",
      "urn:samm:io.catenax.short_term_material_demand:1.0.0#ShortTermMaterialDemand",
      "urn:samm:io.catenax.delivery_information:2.0.0#DeliveryInformation",
      "urn:samm:io.catenax.days_of_supply:2.0.0#DaysOfSupply"
  ];
  
  expectedSemanticIds.forEach(function(semanticId){
      // get SubmodelDescriptor for ItemStock (implicit samm version check)
      const submodelDescriptor = jsonData.submodelDescriptors.find(function (submodelDescriptor) {
          return submodelDescriptor.semanticId.keys[0].value === semanticId;
      });
  
      const submodelName = semanticId.split("#")[1];
  
      test(`SubmodelDescriptor "${submodelName} - Verify that SubmodelDescriptor for ${submodelName} exists and follows DT Standard`, function () {
          expect(submodelDescriptor, `SubmodelDescriptor "${submodelName} - Verify that SubmodelDescriptor for ${submodelName} exists`).to.not.undefined;
  
          // get DSP endpoint
          const dspEndpoint = submodelDescriptor.endpoints.find(function (endpoint) {
              return endpoint.protocolInformation.subprotocol === "DSP";
          });
          
          expect(dspEndpoint, "SubmodelDescriptor " + submodelName + " - Verify that DSP Endpoint is set").to.not.undefined;
  
          expect(dspEndpoint.interface, "SubmodelDescriptor " + submodelName + " - Verify that DSP Endpoint interface is set to Submodel").to.equal("SUBMODEL-3.0");
  
          const PROTOCOL_URL = bru.getEnvVar("CUSTOMER_EDC_EXT_HOSTNAME")+ "/" + bru.getEnvVar("PROTOCOL_PATH");
          expect(dspEndpoint.protocolInformation.subprotocolBody, "SubmodelDescriptor " + submodelName + " - Verify that DSP subprotocolBody is set (id)").to.contain("id=");
          expect(dspEndpoint.protocolInformation.subprotocolBody, "SubmodelDescriptor " + submodelName + " - Verify that DSP subprotocolBody is set (dspEndpoint)").to.contain(";dspEndpoint="+PROTOCOL_URL);
  
          expect(dspEndpoint.protocolInformation.href.startsWith(bru.getEnvVar("CUSTOMER_DP_EDC_EXT_HOSTNAME")+"/api/public"), "SubmodelDescriptor " + submodelName + " - Verify that DSP href is set starting with dataplane").to.be.true;
      });
  });
}

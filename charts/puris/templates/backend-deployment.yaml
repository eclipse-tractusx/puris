#
# Copyright (c) 2022,2024 Volkswagen AG
# Copyright (c) 2022,2024 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. (represented by Fraunhofer ISST)
# Copyright (c) 2022,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  {{- if not .Values.backend.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.backend.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "backend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.backend.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.backend.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "backend.fullname" . }}
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          env:
            - name: SERVER_PORT
              value: "{{ .Values.backend.service.port }}"
            - name: API_ROOTDIR
              value: "{{ .Values.backend.puris.api.rootDir }}"
            - name: DATASOURCE_DRIVERCLASSNAME
              value: "{{ .Values.backend.puris.datasource.driverClassName }}"
            {{- if .Values.postgresql.enabled }}
            - name: DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Values.postgresql.fullnameOverride }}:{{ .Values.postgresql.service.ports.postgresql }}/{{ .Values.postgresql.auth.database}}"
            - name: DATASOURCE_USERNAME
              value: "{{ .Values.postgresql.auth.username }}"
            - name: DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgresql.auth.existingSecret }}"
                  key: "password"
            - name: ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgresql.auth.existingSecret }}"
                  key: "postgres-password"
            {{- else }}
            - name: DATASOURCE_URL
              value: "{{ .Values.backend.puris.datasource.url }}"
            - name: DATASOURCE_USERNAME
              value: "{{ .Values.backend.puris.datasource.username }}"
            - name: DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.backend.puris.existingSecret }}"
                  key: "puris-datasource-password"
            {{- end }}
            - name: EDC_CONTROLPLANE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.backend.puris.existingSecret }}"
                  key: "puris-edc-controlplane-key"
            - name: EDC_CONTROLPLANE_MANAGEMENT_URL
              value: "{{ .Values.backend.puris.edc.controlplane.management.url }}"
            - name: EDC_CONTROLPLANE_PROTOCOL_URL
              value: "{{ .Values.backend.puris.edc.controlplane.protocol.url }}"
            - name: EDC_DATAPLANE_PUBLIC_URL
              value: "{{ .Values.backend.puris.edc.dataplane.public.url }}"
            - name: OWN_BPNA
              value: "{{ .Values.backend.puris.own.bpna }}"
            - name: OWN_BPNL
              value: "{{ .Values.backend.puris.own.bpnl }}"
            - name: OWN_BPNS
              value: "{{ .Values.backend.puris.own.bpns }}"
            - name: OWN_COUNTRY
              value: "{{ .Values.backend.puris.own.country }}"
            - name: OWN_NAME
              value: "{{ .Values.backend.puris.own.name }}"
            - name: OWN_SITE
              value: "{{ .Values.backend.puris.own.site.name }}"
            - name: OWN_STREETANDNUMBER
              value: "{{ .Values.backend.puris.own.streetnumber }}"
            - name: OWN_ZIPCODEANDCITY
              value: "{{ .Values.backend.puris.own.zipcodeandcity }}"
            - name: JPA_HIBERNATE_DDL-AUTO
              value: {{ index .Values.backend "puris" "jpa" "hibernate" "ddl-auto" }} #Need to do workaround because of '-' in ddl-auto
            - name: JPA_PROPERTIES_HIBERNATE_ENABLE.LAZY.LOAD.NO.TRANS
              value: "{{ .Values.backend.puris.jpa.properties.hibernate.enable_lazy_load_no_trans }}"
            - name: PURIS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.backend.puris.existingSecret }}"
                  key: "puris-api-key"
            - name: PURIS_DEMONSTRATOR_ROLE
              value: "{{ .Values.backend.puris.demonstrator.role }}"
            - name: PURIS_BASEURL
                {{- $baseUrl := .Values.backend.puris.baseurl }}
                {{- if not (tpl "(strings.HasSuffix \"$baseUrl\" \"/\")" .) }}
                {{- $baseUrl = printf "%s/" $baseUrl }}
                {{- end }}
                {{- if and .Values.backend.ingress.enabled .Values.backend.ingress.tls }}
              value: "https://{{ $baseUrl }}"
                {{- else }}
              value: "http://{{ $baseUrl }}"
                {{- end}}
            - name: PURIS_EDR_DELETIONTIMER
              value: "{{ .Values.backend.puris.edr.deletiontimer }}"
            - name: PURIS_ITEMSTOCKSUBMODEL_APIASSETID
              value: "{{ .Values.backend.puris.itemstocksubmodel.apiassetid }}"
            - name: PURIS_FRAMEWORKAGREEMENT_USE
              value: "{{ .Values.backend.puris.frameworkagreement.use }}"
            - name: PURIS_FRAMEWORKAGREEMENT_CREDENTIAL
              value: "{{ .Values.backend.puris.frameworkagreement.credential }}"
            - name: PURIS_DTR_URL
              value: "{{ .Values.backend.puris.dtr.url  }}"
            - name: PURIS_GENERATEMATERIALCATENAXID
              value: "{{ .Values.backend.puris.generatematerialcatenaxid  | default true}}"
            ######################################
            ## Additional environment variables ##
            ######################################
            {{- range $key, $value := .Values.backend.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.backend.puris.api.rootDir }}/health/
              port: http
            initialDelaySeconds: {{ .Values.backend.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.backend.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.backend.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.backend.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.backend.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.backend.puris.api.rootDir }}/health/
              port: http
            initialDelaySeconds: {{ .Values.backend.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.backend.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.backend.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.backend.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.backend.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

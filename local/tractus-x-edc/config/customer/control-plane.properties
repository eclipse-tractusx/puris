# API
web.http.default.port=8180
web.http.default.path=/api

# MANAGEMENT (replaced data in 0.3.0)
web.http.management.port=8181
web.http.management.path=/management

# CONTROL (replaced validation in 0.3.0)
web.http.control.port=8183
web.http.control.path=/api/controlplane/control

# PROTOCOL (replaced IDS in 0.3.0)
web.http.protocol.port=8184
web.http.protocol.path=/api/v1/dsp

edc.participant.id=BPNL4444444444XX
edc.api.auth.key= ${EDC_API_PW}
edc.dsp.callback.address=http://customer-control-plane:8184/api/v1/dsp
edc.hostname=customer-control-plane

tx.ssi.oauth.token.url=http://keycloak:8080/realms/miw_test/protocol/openid-connect/token
tx.ssi.oauth.client.id=${CUSTOMER_OAUTH_CLIENT_ID}
tx.ssi.oauth.client.secret.alias=${CUSTOMER_OAUTH_SECRET_ALIAS}
tx.ssi.miw.url=http://miw
tx.ssi.miw.authority.id=BPNL000000000000
tx.ssi.endpoint.audience=http://customer-control-plane:8184/api/v1/dsp

# HashiCorp vault related configuration
edc.vault.hashicorp.url=http://vault:8200
edc.vault.hashicorp.health.check.enabled=false
edc.vault.hashicorp.token= ${VAULT_DEV_ROOT_TOKEN_ID}

# Data-Plane configuration
edc.transfer.proxy.endpoint=http://customer-data-plane:8285/api/public/
edc.transfer.proxy.token.signer.privatekey.alias=${CUSTOMER_PRIVATE_KEY_ALIAS}
edc.transfer.proxy.token.verifier.publickey.alias=${CUSTOMER_PUBLIC_KEY_ALIAS}

# Data-Plane selector configuration
edc.dataplane.selector.edchttp.url=http://customer-data-plane:8299/control/transfer
edc.dataplane.selector.edchttp.sourcetypes=HttpData
edc.dataplane.selector.edchttp.destinationtypes=HttpData,HttpProxy
edc.dataplane.selector.edchttp.properties={"publicApiUrl" : "http://customer-data-plane:8285/api/public/"}

# backend receiver for static Endpoint Data References
edc.receiver.http.dynamic.endpoint=http://customer-backend:8081/catena/edrendpoint
edc.receiver.http.dynamic.auth-key=X-API-KEY
edc.receiver.http.dynamic.auth-code=${CUSTOMER_BACKEND_API_KEY}

# Postgresql related configuration
edc.datasource.asset.name=asset
edc.datasource.asset.url=jdbc:postgresql://postgres:5432/edc_customer_asset
# edc.datasource.asset.user and edc.datasource.asset.password are set via .env
edc.datasource.asset.user= ${PG_USER}
edc.datasource.asset.password= ${PG_PW}

edc.datasource.contractdefinition.name=contractdefinition
edc.datasource.contractdefinition.url=jdbc:postgresql://postgres:5432/edc_customer_contractdefinition

# edc.datasource.contractdefinition.user and edc.datasource.contractdefinition.password are set via .env
edc.datasource.contractdefinition.user= ${PG_USER}
edc.datasource.contractdefinition.password= ${PG_PW}

edc.datasource.contractnegotiation.name=contractnegotiation
edc.datasource.contractnegotiation.url=jdbc:postgresql://postgres:5432/edc_customer_contractnegotiation
# edc.datasource.contractnegotiation.user and edc.datasource.contractnegotiation.password are set via .env
edc.datasource.contractnegotiation.user= ${PG_USER}
edc.datasource.contractnegotiation.password= ${PG_PW}

edc.datasource.policy.name=policy
edc.datasource.policy.url=jdbc:postgresql://postgres:5432/edc_customer_policy
# edc.datasource.policy.user and edc.datasource.policy.password are set via .env
edc.datasource.policy.user= ${PG_USER}
edc.datasource.policy.password= ${PG_PW}

edc.datasource.transferprocess.name=transferprocess
edc.datasource.transferprocess.url=jdbc:postgresql://postgres:5432/edc_customer_transferprocess
# edc.datasource.transferprocess.user and edc.datasource.transferprocess.password are set via .env
edc.datasource.transferprocess.user= ${PG_USER}
edc.datasource.transferprocess.password= ${PG_PW}
# new in 0.4.x
#edc.datasource.edr.name=edr
#edc.datasource.edr.url=jdbc:postgresql://postgres:5432/edc_customer_edrs
# edc.datasource.edr.user and edc.datasource.edr.password are set via .env
#org.eclipse.tractusx.edc.postgresql.migration.edr.enabled=false
#edc.datasource.edr.user=
#edc.datasource.edr.password=

# Data Encryption edc-extensions/data-encryption
edc.data.encryption.keys.alias=${CUSTOMER_ENCRYPTION_KEYS_ALIAS}

